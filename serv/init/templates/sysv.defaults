user="{{ user }}"
group="{{ group }}"
chroot="{{ chroot }}"
chdir="{{ chdir }}"{% if nice %}
nice="{{ nice }}"{% endif %}
{% if limit_coredump %}
limit_coredump="{{ limit_coredump }}"{% endif %}{% if limit_cputime %}
limit_cputime="{{ limit_cputime }}"{% endif %}{% if limit_data %}
limit_data="{{ limit_data }}"{% endif %}{% if limit_file_size %}
limit_file_size="{{ limit_file_size }}"{% endif %}{% if limit_locked_memory %}
limit_locked_memory="{{ limit_locked_memory }}"{% endif %}{% if limit_open_files %}
limit_open_files="{{ limit_open_files }}"{% endif %}{% if limit_user_processes %}
limit_user_processes="{{ limit_user_processes }}"{% endif %}{% if limit_physical_memory %}
limit_physical_memory="{{ limit_physical_memory }}"{% endif %}{% if limit_stack_size %}
limit_stack_size="{{ limit_stack_size }}"{% endif %}

# If this is set to 1, then when `stop` is called, if the process has
# not exited within a reasonable time, SIGKILL will be sent next.
# The default behavior is to simply log a message "program stop failed; still running"
KILL_ON_STOP_TIMEOUT=0

# These will be exported for the process to use (may be empty beneath this if no vars are provided)
{% for var, value in env.items() %}{% filter upper %}export {{ var }}{% endfilter %}={{ value }}
{% endfor %}
